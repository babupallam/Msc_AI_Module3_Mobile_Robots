% ExampleMapFile MG test .txt
% Copyright (C) 2011 Cornell University
% This code is released under the open-source BSD license.  A copy of this
% license should be provided with the software.  If not, email:
% CreateMatlabSim@gmail.com

% File containing map information

% Formatting:
% wall x1 y1 x2 y2
%   Order does not matter between the points
% line x1 y1 x2 y2
% beacon x y [r g b] ID_tag
%   [r g b] is the red-green-blue color vector
% virtwall x y theta
%   Virtual walls emit from a location, not like real walls
%   theta is the angle relative to the positive x-axis

% The enclosing walls
wall -4.5 4.5 -4.5 -4.5
wall -4.5 -4.5 4.5 -4.5
wall 4.5 -4.5 4.5 4.5
wall 4.5 4.5 -4.5 4.5

% Just some reference lines
line 0.5 0 -0.5 0
line 0 0.5 0 -0.5

line 1 0 4 0
line -1 0 -4 0

line 0 1 0 4 
line 0 -1 0 -4

% A wall in the way.
wall 2.5 -1 3 1

% A corner where to get trapped!
wall -1 2 -3.5 2
wall -3.5 2 -3.5 3.5
wall -3.5 3.5 -2 3.5
wall -2 3.5 -2 3
wall -1 2 -1 4.5
% ExampleMapFile MG test .txt
% Copyright (C) 2011 Cornell University
% This code is released under the open-source BSD license. A copy of this
% license should be provided with the software. If not, email:
% CreateMatlabSim@gmail.com

% This file contains information about the map's layout and objects for use
% in robot simulation or testing.

% Formatting:
% - wall x1 y1 x2 y2: Defines a wall segment between two points (x1, y1) and (x2, y2).
%                     The order of the points does not matter.
% - line x1 y1 x2 y2: Defines a reference line for visualization or navigation.
% - beacon x y [r g b] ID_tag: Defines a beacon at (x, y) with an RGB color vector and ID.
% - virtwall x y theta: Defines a virtual wall emitting from (x, y) at angle theta relative
%                       to the positive x-axis.

% The enclosing walls define the boundary of the map.
wall -4.5 4.5 -4.5 -4.5  % Left wall
wall -4.5 -4.5 4.5 -4.5  % Bottom wall
wall 4.5 -4.5 4.5 4.5    % Right wall
wall 4.5 4.5 -4.5 4.5    % Top wall

% Reference lines for navigation or visualization. These lines help in debugging or
% understanding the robot's position in the map but do not act as obstacles.

line 0.5 0 -0.5 0    % Horizontal line crossing the origin
line 0 0.5 0 -0.5    % Vertical line crossing the origin

line 1 0 4 0         % Horizontal line from (1, 0) to (4, 0)
line -1 0 -4 0       % Horizontal line from (-1, 0) to (-4, 0)

line 0 1 0 4         % Vertical line from (0, 1) to (0, 4)
line 0 -1 0 -4       % Vertical line from (0, -1) to (0, -4)

% A small wall segment placed as an obstacle to test the robot's navigation around it.
wall 2.5 -1 3 1      % Slanted wall from (2.5, -1) to (3, 1)

% A corner structure designed to trap the robot if it lacks proper escape logic.
% This section contains multiple interconnected walls forming a boxed area.

wall -1 2 -3.5 2     % Horizontal wall from (-1, 2) to (-3.5, 2)
wall -3.5 2 -3.5 3.5 % Vertical wall from (-3.5, 2) to (-3.5, 3.5)
wall -3.5 3.5 -2 3.5 % Horizontal wall from (-3.5, 3.5) to (-2, 3.5)
wall -2 3.5 -2 3     % Vertical wall from (-2, 3.5) to (-2, 3)
wall -1 2 -1 4.5     % Vertical wall from (-1, 2) to (-1, 4.5)

% The map is designed for testing obstacle avoidance, path-planning algorithms,
% and trapping scenarios. The enclosing walls define boundaries, and the corner
% trap is meant to challenge the robot's logic for handling complex layouts.
